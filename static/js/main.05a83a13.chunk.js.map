{"version":3,"sources":["Components/ContactListItem/ContactListItem.module.css","redux/actions.js","redux/reducer.js","redux/store.js","Components/ContactForm/ContactForm.js","Components/ContactListItem/ContactListItem.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","Components/App.js","index.js","Components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv1","deleteContact","changeFilter","itemsReducer","createReducer","actions","state","filter","contact","filterReducer","_","contactsReducer","combineReducers","items","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","devTools","process","persistor","persistStore","ContactForm","useState","setName","setNumber","dispatch","useDispatch","useSelector","handleChange","event","currentTarget","value","className","s","form","onSubmit","preventDefault","some","item","toLowerCase","isContactExist","alert","form__label","form__input","type","pattern","title","required","onChange","form__btn","ContactListItem","onDeleteContact","list__item","list__btn","onClick","ContactList","includes","map","Filter","e","target","App","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.05a83a13.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list__item\":\"ContactListItem_list__item__3enA-\",\"list__btn\":\"ContactListItem_list__btn__kWGrK\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport { v1 as uuidv1 } from 'uuid';\r\n\r\nexport const addContact = createAction('contacts/ADD', ({ name, number }) => {\r\n  return {\r\n    payload: {\r\n      id: uuidv1(),\r\n      name,\r\n      number,\r\n    },\r\n  };\r\n});\r\n\r\nexport const deleteContact = createAction('contacts/DELETE');\r\nexport const changeFilter = createAction('contacts/FILTER');\r\n\r\n/////////////////////// redux\r\n// import actionsTypes from './types';\r\n// import { v1 as uuidv1 } from 'uuid';\r\n\r\n// export const addContact = ({ name, number }) => ({\r\n//   type: actionsTypes.ADD,\r\n//   payload: {\r\n//     id: uuidv1(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// export const deleteContact = contactId => ({\r\n//   type: actionsTypes.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// export const changeFilter = value => ({\r\n//   type: actionsTypes.FILTER,\r\n//   payload: value,\r\n// });\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './actions';\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nexport default contactsReducer;\r\n\r\n/////////////////// redux\r\n// import { combineReducers } from 'redux';\r\n// import actionsTypes from './types';\r\n\r\n// const itemsReducer = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case actionsTypes.DELETE:\r\n//       return state.filter(contact => contact.id !== payload);\r\n\r\n//     case actionsTypes.ADD:\r\n//       return [...state, payload];\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case actionsTypes.FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const contactsReducer = combineReducers({\r\n//   items: itemsReducer,\r\n//   filter: filterReducer,\r\n// });\r\n\r\n// export default contactsReducer;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { store, persistor };\r\n\r\n//////////////////////// redux\r\n// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import contactsReducer from './reducer';\r\n\r\n// const rootReducer = combineReducers({ contacts: contactsReducer });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;\r\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from '../../redux/actions';\n\nimport s from './ContactForm.module.css';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const items = useSelector(state => state.contacts.items);\n\n  const onSubmit = () => dispatch(actions.addContact({ name, number }));\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const isContactExist = name => {\n      return items.some(item => item.name.toLowerCase() === name.toLowerCase());\n    };\n    isContactExist(name)\n      ? alert(`${name} is already in contacts.`)\n      : onSubmit(name, number);\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.form__label}>\n        Name\n        <input\n          className={s.form__input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChange}\n        />\n      </label>\n      <label className={s.form__label}>\n        Phone number\n        <input\n          className={s.form__input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={handleChange}\n        />\n      </label>\n\n      <button className={s.form__btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n\n// ////////////////// redux\n// import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\n// import * as actions from '../../redux/actions';\n\n// import s from './ContactForm.module.css';\n\n// function ContactForm({ isContactExist, onSubmit }) {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const handleChange = event => {\n//     const { name, value } = event.currentTarget;\n\n//     switch (name) {\n//       case 'name':\n//         setName(value);\n//         break;\n//       case 'number':\n//         setNumber(value);\n//         break;\n//       default:\n//         return;\n//     }\n//   };\n\n//   const handleSubmit = event => {\n//     event.preventDefault();\n//     isContactExist(name)\n//       ? alert(`${name} is already in contacts.`)\n//       : onSubmit({ name, number });\n\n//     setName('');\n//     setNumber('');\n//   };\n\n//   return (\n//     <form className={s.form} onSubmit={handleSubmit}>\n//       <label className={s.form__label}>\n//         Name\n//         <input\n//           className={s.form__input}\n//           type=\"text\"\n//           name=\"name\"\n//           value={name}\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//           required\n//           onChange={handleChange}\n//         />\n//       </label>\n//       <label className={s.form__label}>\n//         Phone number\n//         <input\n//           className={s.form__input}\n//           type=\"tel\"\n//           name=\"number\"\n//           value={number}\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//           required\n//           onChange={handleChange}\n//         />\n//       </label>\n\n//       <button className={s.form__btn} type=\"submit\">\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// }\n\n// const mapStateToProps = state => {\n//   const isContactExist = name => {\n//     return state.contacts.items.some(\n//       item => item.name.toLowerCase() === name.toLowerCase(),\n//     );\n//   };\n//   return { isContactExist };\n// };\n// const mapToDispatchProps = dispatch => ({\n//   onSubmit: ({ name, number }) =>\n//     dispatch(actions.addContact({ name, number })),\n// });\n\n// export default connect(mapStateToProps, mapToDispatchProps)(ContactForm);\n\n// ContactForm.propTypes = { onSubmit: PropTypes.func.isRequired };\n","import PropTypes from 'prop-types';\nimport s from './ContactListItem.module.css';\n\nfunction ContactListItem({ id, name, number, onDeleteContact }) {\n  return (\n    <li className={s.list__item}>\n      {name}: {number}\n      <button\n        className={s.list__btn}\n        type=\"button\"\n        onClick={() => onDeleteContact(id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n}\n\nexport default ContactListItem;\n\nContactListItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport * as actions from '../../redux/actions';\n\nfunction ContactList() {\n  const filter = useSelector(state => state.contacts.filter);\n  const contacts = useSelector(state => state.contacts.items);\n\n  const dispatch = useDispatch();\n\n  return (\n    <ul>\n      {contacts\n        .filter(item => item.name.toLowerCase().includes(filter.toLowerCase()))\n        .map(({ name, id, number }) => (\n          <ContactListItem\n            key={id}\n            name={name}\n            number={number}\n            onDeleteContact={() => dispatch(actions.deleteContact(id))}\n          />\n        ))}\n    </ul>\n  );\n}\n\nexport default ContactList;\n\n///////////////redux\n// import { connect } from 'react-redux';\n// import ContactListItem from '../ContactListItem/ContactListItem';\n// import * as actions from '../../redux/actions';\n// import PropTypes from 'prop-types';\n\n// const ContactList = ({ contacts, onDeleteContact }) => {\n//   return (\n//     <ul>\n//       {contacts.map(({ name, id, number }) => (\n//         <ContactListItem\n//           key={id}\n//           name={name}\n//           number={number}\n//           onDeleteContact={() => onDeleteContact(id)}\n//         />\n//       ))}\n//     </ul>\n//   );\n// };\n\n// const mapStateToProps = state => ({\n//   contacts: state.contacts.items.filter(item =>\n//     item.name.toLowerCase().includes(state.contacts.filter.toLowerCase()),\n//   ),\n// });\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: contactId => dispatch(actions.deleteContact(contactId)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.array.isRequired,\n//   onDeleteContact: PropTypes.func.isRequired,\n// };\n","import { useSelector, useDispatch } from 'react-redux';\nimport * as actions from '../../redux/actions';\n\nconst Filter = () => {\n  const value = useSelector(state => state.contacts.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          name=\"filter\"\n          value={value}\n          onChange={e => dispatch(actions.changeFilter(e.target.value))}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n\n/////////////////redux\n// import { connect } from 'react-redux';\n// import * as actions from '../../redux/actions';\n// import PropTypes from 'prop-types';\n\n// const Filter = ({ value, onChange }) => {\n//   return (\n//     <div>\n//       <label>\n//         Find contacts by name\n//         <input type=\"text\" name=\"filter\" value={value} onChange={onChange} />\n//       </label>\n//     </div>\n//   );\n// };\n\n// const mapStateToProps = state => ({\n//   value: state.contacts.filter,\n// });\n// const mapDispatchToProps = dispatch => ({\n//   onChange: e => dispatch(actions.changeFilter(e.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n","import React from 'react';\nimport ContactForm from './ContactForm/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nimport App from './Components/App';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store.store}>\n    <PersistGate loading={null} persistor={store.persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1pAa9\",\"form__input\":\"ContactForm_form__input__2eCyB\",\"form__label\":\"ContactForm_form__label__3kJ1_\",\"form__btn\":\"ContactForm_form__btn__2dBJ5\"};"],"sourceRoot":""}